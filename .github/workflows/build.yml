name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  go:
    name: go test and build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/backend
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: install dep
      run: |
       go get -d -v
       go get github.com/stretchr/testify
    - name: run tests
      run: go test -coverprofile=coverage.out -coverpkg=./... ./...
    - name: build
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o .
    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: backend
        path: src/backend/backend
  yarn:
    name: cache node modules
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [yarn]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
    - name: lint
      working-directory: ./src/frontend
      run: npm run lint
  test:
    name: test
    runs-on: ubuntu-latest
    needs: [yarn]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
    - name: test
      working-directory: ./src/frontend
      run: npm run test
  build:
    name: build
    runs-on: ubuntu-latest
    needs: [yarn]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
    - name: build
      working-directory: ./src/frontend
      run: npm run build:prod
    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: frontend
        path: src/frontend/dist 
  docker:
    name: build docker
    runs-on: ubuntu-latest
    needs: [build, go]
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: ./docker
      - name: Build image
        working-directory: ./docker
        run: docker build . --file Dockerfile --tag test:v2
        
