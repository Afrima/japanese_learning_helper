name: Build Frontend

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  yarn:
    name: Yarn
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [yarn]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
    - name: lint
      working-directory: ./src/frontend
      run: npm run lint
  test:
    name: test
    runs-on: ubuntu-latest
    needs: [yarn]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
    - name: test
      working-directory: ./src/frontend
      run: npm run test
  build:
    name: build
    runs-on: ubuntu-latest
    needs: [yarn]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: yarn-cache-node-modules
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('src/frontend/yarn.lock') }}
    - name: Yarn install
      if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
      working-directory: ./src/frontend
      run: yarn install
    - name: build
      working-directory: ./src/frontend
      run: npm run build:prod
    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: frontend
        path: src/frontend/dist 
  godep:
    name: go dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Set env vars
      run: |
        echo "CGO_ENABLED=0" >> $GITHUB_ENV
        echo "${HOME}/goroot/bin" >> $GITHUB_PATH
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: cache-go-dep
      with:
        path: ${HOME}/goroot/bin
        key: ${{ runner.os }}-cache-go-dep-${{ hashFiles('src/backend/**') }}
    - name: install dep
      if: steps.cache-go-dep.outputs.cache-hit != 'true'
      working-directory: ./src/backend
      run: |
       - go get -d -v
       - go get github.com/stretchr/testify
  gotest:
    name: go-test
    needs: [godep]
    runs-on: ubuntu-latest
    steps:
    - name: Set env vars
      run: |
        echo "CGO_ENABLED=0" >> $GITHUB_ENV
        echo "${HOME}/goroot/bin" >> $GITHUB_PATH
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      id: cache-go-dep
      with:
        path: ${HOME}/goroot/bin
        key: ${{ runner.os }}-cache-go-dep-${{ hashFiles('src/backend/**') }}
    - name: install dep
      if: steps.cache-go-dep.outputs.cache-hit != 'true'
      working-directory: ./src/backend
      run: |
       - go get -d -v
       - go get github.com/stretchr/testify
    - name: run tests
      working-directory: ./src/backend
      run: go test -coverprofile=coverage.out -coverpkg=./... ./...
      
   
